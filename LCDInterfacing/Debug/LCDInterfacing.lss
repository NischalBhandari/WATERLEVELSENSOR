
LCDInterfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000684  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001ca  00800060  00000684  00000718  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ea  0080022a  0080022a  000008e2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000008e2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001e0  00000000  00000000  0000093e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000022c9  00000000  00000000  00000b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009ba  00000000  00000000  00002de7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c72  00000000  00000000  000037a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005bc  00000000  00000000  00004414  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000075b  00000000  00000000  000049d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001832  00000000  00000000  0000512b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001c0  00000000  00000000  0000695d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 10 01 	jmp	0x220	; 0x220 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e8       	ldi	r30, 0x84	; 132
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 32       	cpi	r26, 0x2A	; 42
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	23 e0       	ldi	r18, 0x03	; 3
  78:	aa e2       	ldi	r26, 0x2A	; 42
  7a:	b2 e0       	ldi	r27, 0x02	; 2
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 31       	cpi	r26, 0x14	; 20
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 40 03 	jmp	0x680	; 0x680 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
		_packet[0] = (packet_id_counter >> 8) & 0xFF;
		_packet[1] = packet_id_counter & 0xFF;
		_packet+=2;
		packet_id_counter++;
	}
	memmove(_packet, data, Datalen);
  92:	0e 94 cd 00 	call	0x19a	; 0x19a <LCD_Init>
	_packet+= Datalen;
  96:	0e 94 0a 01 	call	0x214	; 0x214 <SensorInit>
	_length = _packet - packet;
  9a:	78 94       	sei
  9c:	60 e0       	ldi	r22, 0x00	; 0
  9e:	7b e4       	ldi	r23, 0x4B	; 75
		uint8_t encodedByte = _length % 128;
		_length /= 128;
		if ( _length > 0 ) {
			encodedByte |= 0x80;
		}
		_packet[0] = encodedByte;
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	90 e0       	ldi	r25, 0x00	; 0
		_packet++;
	} while ( _length > 0 );
	_packet = AddStringToBuf(_packet, topic);
  a4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <USART_Init>
  a8:	87 e9       	ldi	r24, 0x97	; 151
  aa:	90 e0       	ldi	r25, 0x00	; 0
	if(qos > 0) {
  ac:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCD_String>
  b0:	80 ec       	ldi	r24, 0xC0	; 192
	memmove(_packet, data, Datalen);
	_packet+= Datalen;
	_length = _packet - packet;

	return _length;
}
  b2:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Command>
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	83 e2       	ldi	r24, 0x23	; 35
  ba:	94 ef       	ldi	r25, 0xF4	; 244
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x2a>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x34>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	00 00       	nop
	sei();
	USART_Init(19200);
	LCD_String("Electron Solution");
	LCD_Command(0xC0); /* Go to 2nd line */
	_delay_ms(5000);
	LCD_Clear();
  c8:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCD_Clear>
	//LCD_String(getSignalQuality(0));

	while(!SIM900_Start());
  cc:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SIM900_Start>
  d0:	88 23       	and	r24, r24
  d2:	e1 f3       	breq	.-8      	; 0xcc <main+0x3a>
  d4:	2f ef       	ldi	r18, 0xFF	; 255
  d6:	87 ea       	ldi	r24, 0xA7	; 167
  d8:	91 e6       	ldi	r25, 0x61	; 97
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x48>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x52>
  e4:	00 00       	nop
	//TCPClient_Connect(APN, USERNAME, PASSWORD);
	while(1)
	{
	
	_delay_ms(2000);
	SMS_Test();
  e6:	0e 94 89 02 	call	0x512	; 0x512 <SMS_Test>
  ea:	2f ef       	ldi	r18, 0xFF	; 255
  ec:	87 ea       	ldi	r24, 0xA7	; 167
  ee:	91 e6       	ldi	r25, 0x61	; 97
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	80 40       	sbci	r24, 0x00	; 0
  f4:	90 40       	sbci	r25, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x5e>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x68>
  fa:	00 00       	nop
  fc:	eb cf       	rjmp	.-42     	; 0xd4 <main+0x42>

000000fe <LCD_Command>:
#include "lcdlib.h"


void LCD_Command( unsigned char cmnd )
{
	LCD_Port = (LCD_Port & 0xC3) | (cmnd  >> 2); /* sending upper nibble */
  fe:	95 b3       	in	r25, 0x15	; 21
 100:	28 2f       	mov	r18, r24
 102:	26 95       	lsr	r18
 104:	26 95       	lsr	r18
 106:	93 7c       	andi	r25, 0xC3	; 195
 108:	92 2b       	or	r25, r18
 10a:	95 bb       	out	0x15, r25	; 21
	LCD_Port &= ~ (1<<RS);		/* RS=0, command reg. */
 10c:	a8 98       	cbi	0x15, 0	; 21
	LCD_Port |= (1<<EN);		/* Enable pulse */
 10e:	a9 9a       	sbi	0x15, 1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 110:	95 e0       	ldi	r25, 0x05	; 5
 112:	9a 95       	dec	r25
 114:	f1 f7       	brne	.-4      	; 0x112 <LCD_Command+0x14>
 116:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 118:	a9 98       	cbi	0x15, 1	; 21
 11a:	ef e1       	ldi	r30, 0x1F	; 31
 11c:	f3 e0       	ldi	r31, 0x03	; 3
 11e:	31 97       	sbiw	r30, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <LCD_Command+0x20>
 122:	00 c0       	rjmp	.+0      	; 0x124 <LCD_Command+0x26>
 124:	00 00       	nop

	_delay_us(200);

	LCD_Port = (LCD_Port & 0xC3) | (cmnd << 2);  /* sending lower nibble */
 126:	95 b3       	in	r25, 0x15	; 21
 128:	88 0f       	add	r24, r24
 12a:	88 0f       	add	r24, r24
 12c:	93 7c       	andi	r25, 0xC3	; 195
 12e:	89 2b       	or	r24, r25
 130:	85 bb       	out	0x15, r24	; 21
	LCD_Port |= (1<<EN);
 132:	a9 9a       	sbi	0x15, 1	; 21
 134:	f5 e0       	ldi	r31, 0x05	; 5
 136:	fa 95       	dec	r31
 138:	f1 f7       	brne	.-4      	; 0x136 <LCD_Command+0x38>
 13a:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 13c:	a9 98       	cbi	0x15, 1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13e:	8f e3       	ldi	r24, 0x3F	; 63
 140:	9f e1       	ldi	r25, 0x1F	; 31
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <LCD_Command+0x44>
 146:	00 c0       	rjmp	.+0      	; 0x148 <LCD_Command+0x4a>
 148:	00 00       	nop
 14a:	08 95       	ret

0000014c <LCD_Char>:
}


void LCD_Char( unsigned char data )
{
	LCD_Port = (LCD_Port & 0xC3) | (data >> 2 ); /* sending upper nibble */
 14c:	95 b3       	in	r25, 0x15	; 21
 14e:	28 2f       	mov	r18, r24
 150:	26 95       	lsr	r18
 152:	26 95       	lsr	r18
 154:	93 7c       	andi	r25, 0xC3	; 195
 156:	92 2b       	or	r25, r18
 158:	95 bb       	out	0x15, r25	; 21
	LCD_Port |= (1<<RS);		/* RS=1, data reg. */
 15a:	a8 9a       	sbi	0x15, 0	; 21
	LCD_Port|= (1<<EN);
 15c:	a9 9a       	sbi	0x15, 1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15e:	95 e0       	ldi	r25, 0x05	; 5
 160:	9a 95       	dec	r25
 162:	f1 f7       	brne	.-4      	; 0x160 <LCD_Char+0x14>
 164:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 166:	a9 98       	cbi	0x15, 1	; 21
 168:	ef e1       	ldi	r30, 0x1F	; 31
 16a:	f3 e0       	ldi	r31, 0x03	; 3
 16c:	31 97       	sbiw	r30, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <LCD_Char+0x20>
 170:	00 c0       	rjmp	.+0      	; 0x172 <LCD_Char+0x26>
 172:	00 00       	nop

	_delay_us(200);

	LCD_Port = (LCD_Port & 0xC3) | (data << 2); /* sending lower nibble */
 174:	95 b3       	in	r25, 0x15	; 21
 176:	88 0f       	add	r24, r24
 178:	88 0f       	add	r24, r24
 17a:	93 7c       	andi	r25, 0xC3	; 195
 17c:	89 2b       	or	r24, r25
 17e:	85 bb       	out	0x15, r24	; 21
	LCD_Port |= (1<<EN);
 180:	a9 9a       	sbi	0x15, 1	; 21
 182:	f5 e0       	ldi	r31, 0x05	; 5
 184:	fa 95       	dec	r31
 186:	f1 f7       	brne	.-4      	; 0x184 <LCD_Char+0x38>
 188:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 18a:	a9 98       	cbi	0x15, 1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18c:	8f e3       	ldi	r24, 0x3F	; 63
 18e:	9f e1       	ldi	r25, 0x1F	; 31
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <LCD_Char+0x44>
 194:	00 c0       	rjmp	.+0      	; 0x196 <LCD_Char+0x4a>
 196:	00 00       	nop
 198:	08 95       	ret

0000019a <LCD_Init>:
	_delay_ms(2);
}

void LCD_Init (void)			/* LCD Initialize function */
{
	LCD_Dir = 0x3F;			/* Make LCD port direction as o/p */
 19a:	8f e3       	ldi	r24, 0x3F	; 63
 19c:	84 bb       	out	0x14, r24	; 20
 19e:	2f ef       	ldi	r18, 0xFF	; 255
 1a0:	86 e7       	ldi	r24, 0x76	; 118
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	21 50       	subi	r18, 0x01	; 1
 1a6:	80 40       	sbci	r24, 0x00	; 0
 1a8:	90 40       	sbci	r25, 0x00	; 0
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <LCD_Init+0xa>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <LCD_Init+0x14>
 1ae:	00 00       	nop
	_delay_ms(30);			/* LCD Power ON delay always >15ms */
	
	LCD_Command(0x02);		/* send for 4 bit initialization of LCD  */
 1b0:	82 e0       	ldi	r24, 0x02	; 2
 1b2:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Command>
	LCD_Command(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
 1b6:	88 e2       	ldi	r24, 0x28	; 40
 1b8:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Command>
	LCD_Command(0x0c);              /* Display on cursor off*/
 1bc:	8c e0       	ldi	r24, 0x0C	; 12
 1be:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Command>
	LCD_Command(0x06);              /* Increment cursor (shift cursor to right)*/
 1c2:	86 e0       	ldi	r24, 0x06	; 6
 1c4:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Command>
	LCD_Command(0x01);              /* Clear display screen*/
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Command>
 1ce:	8f e3       	ldi	r24, 0x3F	; 63
 1d0:	9f e1       	ldi	r25, 0x1F	; 31
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <LCD_Init+0x38>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <LCD_Init+0x3e>
 1d8:	00 00       	nop
 1da:	08 95       	ret

000001dc <LCD_String>:
	_delay_ms(2);
}


void LCD_String(char *str)
{
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	ec 01       	movw	r28, r24
	
	int i;
	for(i=0; str[i]!=0; i++)
 1e2:	88 81       	ld	r24, Y
 1e4:	88 23       	and	r24, r24
 1e6:	31 f0       	breq	.+12     	; 0x1f4 <LCD_String+0x18>
 1e8:	21 96       	adiw	r28, 0x01	; 1
	{
		
		LCD_Char(str[i]);
 1ea:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_Char>

void LCD_String(char *str)
{
	
	int i;
	for(i=0; str[i]!=0; i++)
 1ee:	89 91       	ld	r24, Y+
 1f0:	81 11       	cpse	r24, r1
 1f2:	fb cf       	rjmp	.-10     	; 0x1ea <LCD_String+0xe>
	{
		
		LCD_Char(str[i]);
	}
}
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <LCD_Clear>:
}

void LCD_Clear()
{
	
	LCD_Command(0x01); /*clear display */
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Command>
 200:	8f e3       	ldi	r24, 0x3F	; 63
 202:	9f e1       	ldi	r25, 0x1F	; 31
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <LCD_Clear+0xa>
 208:	00 c0       	rjmp	.+0      	; 0x20a <LCD_Clear+0x10>
 20a:	00 00       	nop
	_delay_ms(2);
	LCD_Command(0x80); /* cursor at home position */
 20c:	80 e8       	ldi	r24, 0x80	; 128
 20e:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_Command>
 212:	08 95       	ret

00000214 <SensorInit>:
#include "ultrasonic.h"
int TimerOverflow = 0;

void SensorInit()
{
	DDRD = (1 << PD6);
 214:	80 e4       	ldi	r24, 0x40	; 64
 216:	81 bb       	out	0x11, r24	; 17
	TIMSK  = (1 << TOIE1);
 218:	84 e0       	ldi	r24, 0x04	; 4
 21a:	89 bf       	out	0x39, r24	; 57
	TCCR1A = 0;
 21c:	1f bc       	out	0x2f, r1	; 47
 21e:	08 95       	ret

00000220 <__vector_9>:
	strcat(myString, "cm");
	return myString;
}

ISR(TIMER1_OVF_vect)
{
 220:	1f 92       	push	r1
 222:	0f 92       	push	r0
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	0f 92       	push	r0
 228:	11 24       	eor	r1, r1
 22a:	8f 93       	push	r24
 22c:	9f 93       	push	r25
	TimerOverflow++;	/* Increment Timer Overflow count */
 22e:	80 91 2a 02 	lds	r24, 0x022A
 232:	90 91 2b 02 	lds	r25, 0x022B
 236:	01 96       	adiw	r24, 0x01	; 1
 238:	90 93 2b 02 	sts	0x022B, r25
 23c:	80 93 2a 02 	sts	0x022A, r24
}
 240:	9f 91       	pop	r25
 242:	8f 91       	pop	r24
 244:	0f 90       	pop	r0
 246:	0f be       	out	0x3f, r0	; 63
 248:	0f 90       	pop	r0
 24a:	1f 90       	pop	r1
 24c:	18 95       	reti

0000024e <Read_Response>:
int8_t Response_Status, CRLF_COUNT = 0;
volatile int16_t Counter = 0, pointer = 0;
uint32_t TimeOut = 0;

void Read_Response()
{
 24e:	2f 92       	push	r2
 250:	3f 92       	push	r3
 252:	4f 92       	push	r4
 254:	5f 92       	push	r5
 256:	6f 92       	push	r6
 258:	7f 92       	push	r7
 25a:	8f 92       	push	r8
 25c:	9f 92       	push	r9
 25e:	af 92       	push	r10
 260:	bf 92       	push	r11
 262:	cf 92       	push	r12
 264:	df 92       	push	r13
 266:	ef 92       	push	r14
 268:	ff 92       	push	r15
 26a:	0f 93       	push	r16
 26c:	1f 93       	push	r17
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	cd b7       	in	r28, 0x3d	; 61
 274:	de b7       	in	r29, 0x3e	; 62
 276:	28 97       	sbiw	r28, 0x08	; 8
 278:	0f b6       	in	r0, 0x3f	; 63
 27a:	f8 94       	cli
 27c:	de bf       	out	0x3e, r29	; 62
 27e:	0f be       	out	0x3f, r0	; 63
 280:	cd bf       	out	0x3d, r28	; 61
	while(1)
	{
		/**
			If the timecount is greater than 10000(Default Timeout) + TimeOut then return nothing
		 **/
		if(TimeCount >= (DEFAULT_TIMEOUT+TimeOut))
 282:	80 91 2c 02 	lds	r24, 0x022C
 286:	90 91 2d 02 	lds	r25, 0x022D
 28a:	a0 91 2e 02 	lds	r26, 0x022E
 28e:	b0 91 2f 02 	lds	r27, 0x022F
 292:	80 3f       	cpi	r24, 0xF0	; 240
 294:	98 4d       	sbci	r25, 0xD8	; 216
 296:	af 4f       	sbci	r26, 0xFF	; 255
 298:	bf 4f       	sbci	r27, 0xFF	; 255
 29a:	71 f4       	brne	.+28     	; 0x2b8 <Read_Response+0x6a>
		{
			CRLF_COUNT = 0; TimeOut = 0;
 29c:	10 92 34 02 	sts	0x0234, r1
 2a0:	10 92 2c 02 	sts	0x022C, r1
 2a4:	10 92 2d 02 	sts	0x022D, r1
 2a8:	10 92 2e 02 	sts	0x022E, r1
 2ac:	10 92 2f 02 	sts	0x022F, r1
			Response_Status = SIM900_RESPONSE_TIMEOUT;
 2b0:	83 e6       	ldi	r24, 0x63	; 99
 2b2:	80 93 13 03 	sts	0x0313, r24
			return;
 2b6:	a6 c0       	rjmp	.+332    	; 0x404 <Read_Response+0x1b6>

void Read_Response()
{
	char CRLF_BUF[2];
	char CRLF_FOUND;
	uint32_t TimeCount = 0, ResponseBufferLength;
 2b8:	81 2c       	mov	r8, r1
 2ba:	91 2c       	mov	r9, r1
 2bc:	54 01       	movw	r10, r8
					
					// CHECK if the CRLF_BUF contains these characters
					if(!strncmp(CRLF_BUF, "\r\n", 2))
					{
						// if the Character finds these 2 times then
						if(++CRLF_FOUND == (DEFAULT_CRLF_COUNT+CRLF_COUNT))
 2be:	21 2c       	mov	r2, r1
		/* If the response status is SIM900_RESPONSE_STARTING
		CRLF_FOUND = 0
		set the CRLF_BUF to ZERO for 2 size
		Response_Stauts= SIM900_RESPONSE_WAITING                                                                     */
		/************************************************************************/
		if(Response_Status == SIM900_RESPONSE_STARTING)
 2c0:	80 91 13 03 	lds	r24, 0x0313
 2c4:	85 36       	cpi	r24, 0x65	; 101
 2c6:	29 f4       	brne	.+10     	; 0x2d2 <Read_Response+0x84>
		{
			CRLF_FOUND = 0;
			/* fill memory block with a certain value memset(void *ptr, int x , size_t n) */
			memset(CRLF_BUF, 0, 2);
 2c8:	1a 82       	std	Y+2, r1	; 0x02
 2ca:	19 82       	std	Y+1, r1	; 0x01
			
			Response_Status = SIM900_RESPONSE_WAITING;
 2cc:	31 e6       	ldi	r19, 0x61	; 97
 2ce:	30 93 13 03 	sts	0x0313, r19
		Compare CRLF_BUF with \r\N 
		int strncmp(const char *str1, const char *str2, size_t n)

		                                                                     */
		/************************************************************************/
		ResponseBufferLength = strlen(RESPONSE_BUFFER);
 2d2:	e7 e3       	ldi	r30, 0x37	; 55
 2d4:	f2 e0       	ldi	r31, 0x02	; 2
 2d6:	01 90       	ld	r0, Z+
 2d8:	00 20       	and	r0, r0
 2da:	e9 f7       	brne	.-6      	; 0x2d6 <Read_Response+0x88>
 2dc:	31 97       	sbiw	r30, 0x01	; 1
 2de:	cf 01       	movw	r24, r30
 2e0:	87 53       	subi	r24, 0x37	; 55
 2e2:	92 40       	sbci	r25, 0x02	; 2
 2e4:	a0 e0       	ldi	r26, 0x00	; 0
 2e6:	b0 e0       	ldi	r27, 0x00	; 0
		//LCD_String(RESPONSE_BUFFER);
		if (ResponseBufferLength)
 2e8:	00 97       	sbiw	r24, 0x00	; 0
 2ea:	a1 05       	cpc	r26, r1
 2ec:	b1 05       	cpc	r27, r1
 2ee:	09 f4       	brne	.+2      	; 0x2f2 <Read_Response+0xa4>
 2f0:	6b c0       	rjmp	.+214    	; 0x3c8 <Read_Response+0x17a>
 2f2:	ef e9       	ldi	r30, 0x9F	; 159
 2f4:	ff e0       	ldi	r31, 0x0F	; 15
 2f6:	31 97       	sbiw	r30, 0x01	; 1
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <Read_Response+0xa8>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <Read_Response+0xae>
 2fc:	00 00       	nop
		{
			_delay_ms(1);
			TimeCount++;
 2fe:	ff ef       	ldi	r31, 0xFF	; 255
 300:	8f 1a       	sub	r8, r31
 302:	9f 0a       	sbc	r9, r31
 304:	af 0a       	sbc	r10, r31
 306:	bf 0a       	sbc	r11, r31
			if (ResponseBufferLength==strlen(RESPONSE_BUFFER))
 308:	e7 e3       	ldi	r30, 0x37	; 55
 30a:	f2 e0       	ldi	r31, 0x02	; 2
 30c:	01 90       	ld	r0, Z+
 30e:	00 20       	and	r0, r0
 310:	e9 f7       	brne	.-6      	; 0x30c <Read_Response+0xbe>
 312:	31 97       	sbiw	r30, 0x01	; 1
 314:	9f 01       	movw	r18, r30
 316:	27 53       	subi	r18, 0x37	; 55
 318:	32 40       	sbci	r19, 0x02	; 2
 31a:	69 01       	movw	r12, r18
 31c:	e1 2c       	mov	r14, r1
 31e:	f1 2c       	mov	r15, r1
 320:	c8 16       	cp	r12, r24
 322:	d9 06       	cpc	r13, r25
 324:	ea 06       	cpc	r14, r26
 326:	fb 06       	cpc	r15, r27
 328:	09 f0       	breq	.+2      	; 0x32c <Read_Response+0xde>
 32a:	4e c0       	rjmp	.+156    	; 0x3c8 <Read_Response+0x17a>
			{
				for (uint16_t i=0;i<ResponseBufferLength;i++)
 32c:	c1 14       	cp	r12, r1
 32e:	d1 04       	cpc	r13, r1
 330:	e1 04       	cpc	r14, r1
 332:	f1 04       	cpc	r15, r1
 334:	09 f4       	brne	.+2      	; 0x338 <Read_Response+0xea>
 336:	48 c0       	rjmp	.+144    	; 0x3c8 <Read_Response+0x17a>
					
					// CHECK if the CRLF_BUF contains these characters
					if(!strncmp(CRLF_BUF, "\r\n", 2))
					{
						// if the Character finds these 2 times then
						if(++CRLF_FOUND == (DEFAULT_CRLF_COUNT+CRLF_COUNT))
 338:	80 91 34 02 	lds	r24, 0x0234
 33c:	99 27       	eor	r25, r25
 33e:	87 fd       	sbrc	r24, 7
 340:	90 95       	com	r25
 342:	9c 01       	movw	r18, r24
 344:	2f 5f       	subi	r18, 0xFF	; 255
 346:	3f 4f       	sbci	r19, 0xFF	; 255
 348:	3c 83       	std	Y+4, r19	; 0x04
 34a:	2b 83       	std	Y+3, r18	; 0x03
 34c:	07 e3       	ldi	r16, 0x37	; 55
 34e:	12 e0       	ldi	r17, 0x02	; 2
 350:	41 2c       	mov	r4, r1
 352:	51 2c       	mov	r5, r1
 354:	61 2c       	mov	r6, r1
 356:	71 2c       	mov	r7, r1
 358:	32 2c       	mov	r3, r2
 35a:	8d 82       	std	Y+5, r8	; 0x05
 35c:	9e 82       	std	Y+6, r9	; 0x06
 35e:	af 82       	std	Y+7, r10	; 0x07
 360:	b8 86       	std	Y+8, r11	; 0x08
 362:	59 01       	movw	r10, r18
			if (ResponseBufferLength==strlen(RESPONSE_BUFFER))
			{
				for (uint16_t i=0;i<ResponseBufferLength;i++)
				{
					// move the CRLF_BUF[1] TO CRLF_BUF[0] this is like pushing the stack from back
					memmove(CRLF_BUF, CRLF_BUF + 1, 1);
 364:	8a 81       	ldd	r24, Y+2	; 0x02
 366:	89 83       	std	Y+1, r24	; 0x01
					
					// now add the new data to the space . So hence this is a 2 character buffer to check the \r\n
					CRLF_BUF[1] = RESPONSE_BUFFER[i];
 368:	f8 01       	movw	r30, r16
 36a:	81 91       	ld	r24, Z+
 36c:	8f 01       	movw	r16, r30
 36e:	8a 83       	std	Y+2, r24	; 0x02
					
					// CHECK if the CRLF_BUF contains these characters
					if(!strncmp(CRLF_BUF, "\r\n", 2))
 370:	42 e0       	ldi	r20, 0x02	; 2
 372:	50 e0       	ldi	r21, 0x00	; 0
 374:	6d ea       	ldi	r22, 0xAD	; 173
 376:	70 e0       	ldi	r23, 0x00	; 0
 378:	ce 01       	movw	r24, r28
 37a:	01 96       	adiw	r24, 0x01	; 1
 37c:	0e 94 18 03 	call	0x630	; 0x630 <strncmp>
 380:	89 2b       	or	r24, r25
 382:	a1 f4       	brne	.+40     	; 0x3ac <Read_Response+0x15e>
					{
						// if the Character finds these 2 times then
						if(++CRLF_FOUND == (DEFAULT_CRLF_COUNT+CRLF_COUNT))
 384:	33 94       	inc	r3
 386:	83 2d       	mov	r24, r3
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	8a 15       	cp	r24, r10
 38c:	9b 05       	cpc	r25, r11
 38e:	71 f4       	brne	.+28     	; 0x3ac <Read_Response+0x15e>
						{
							CRLF_COUNT = 0; TimeOut = 0;
 390:	10 92 34 02 	sts	0x0234, r1
 394:	10 92 2c 02 	sts	0x022C, r1
 398:	10 92 2d 02 	sts	0x022D, r1
 39c:	10 92 2e 02 	sts	0x022E, r1
 3a0:	10 92 2f 02 	sts	0x022F, r1
							Response_Status = SIM900_RESPONSE_FINISHED;
 3a4:	82 e6       	ldi	r24, 0x62	; 98
 3a6:	80 93 13 03 	sts	0x0313, r24
							return;
 3aa:	2c c0       	rjmp	.+88     	; 0x404 <Read_Response+0x1b6>
 3ac:	ff ef       	ldi	r31, 0xFF	; 255
 3ae:	4f 1a       	sub	r4, r31
 3b0:	5f 0a       	sbc	r5, r31
 3b2:	6f 0a       	sbc	r6, r31
 3b4:	7f 0a       	sbc	r7, r31
		{
			_delay_ms(1);
			TimeCount++;
			if (ResponseBufferLength==strlen(RESPONSE_BUFFER))
			{
				for (uint16_t i=0;i<ResponseBufferLength;i++)
 3b6:	4c 14       	cp	r4, r12
 3b8:	5d 04       	cpc	r5, r13
 3ba:	6e 04       	cpc	r6, r14
 3bc:	7f 04       	cpc	r7, r15
 3be:	91 f6       	brne	.-92     	; 0x364 <Read_Response+0x116>
 3c0:	8d 80       	ldd	r8, Y+5	; 0x05
 3c2:	9e 80       	ldd	r9, Y+6	; 0x06
 3c4:	af 80       	ldd	r10, Y+7	; 0x07
 3c6:	b8 84       	ldd	r11, Y+8	; 0x08
 3c8:	8f e9       	ldi	r24, 0x9F	; 159
 3ca:	9f e0       	ldi	r25, 0x0F	; 15
 3cc:	01 97       	sbiw	r24, 0x01	; 1
 3ce:	f1 f7       	brne	.-4      	; 0x3cc <Read_Response+0x17e>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <Read_Response+0x184>
 3d2:	00 00       	nop
				}
				CRLF_FOUND = 0;
			}
		}
		_delay_ms(1);
		TimeCount++;
 3d4:	9f ef       	ldi	r25, 0xFF	; 255
 3d6:	89 1a       	sub	r8, r25
 3d8:	99 0a       	sbc	r9, r25
 3da:	a9 0a       	sbc	r10, r25
 3dc:	b9 0a       	sbc	r11, r25
	while(1)
	{
		/**
			If the timecount is greater than 10000(Default Timeout) + TimeOut then return nothing
		 **/
		if(TimeCount >= (DEFAULT_TIMEOUT+TimeOut))
 3de:	80 91 2c 02 	lds	r24, 0x022C
 3e2:	90 91 2d 02 	lds	r25, 0x022D
 3e6:	a0 91 2e 02 	lds	r26, 0x022E
 3ea:	b0 91 2f 02 	lds	r27, 0x022F
 3ee:	80 5f       	subi	r24, 0xF0	; 240
 3f0:	98 4d       	sbci	r25, 0xD8	; 216
 3f2:	af 4f       	sbci	r26, 0xFF	; 255
 3f4:	bf 4f       	sbci	r27, 0xFF	; 255
 3f6:	88 16       	cp	r8, r24
 3f8:	99 06       	cpc	r9, r25
 3fa:	aa 06       	cpc	r10, r26
 3fc:	bb 06       	cpc	r11, r27
 3fe:	08 f4       	brcc	.+2      	; 0x402 <Read_Response+0x1b4>
 400:	5f cf       	rjmp	.-322    	; 0x2c0 <Read_Response+0x72>
 402:	4c cf       	rjmp	.-360    	; 0x29c <Read_Response+0x4e>
			}
		}
		_delay_ms(1);
		TimeCount++;
	}
}
 404:	28 96       	adiw	r28, 0x08	; 8
 406:	0f b6       	in	r0, 0x3f	; 63
 408:	f8 94       	cli
 40a:	de bf       	out	0x3e, r29	; 62
 40c:	0f be       	out	0x3f, r0	; 63
 40e:	cd bf       	out	0x3d, r28	; 61
 410:	df 91       	pop	r29
 412:	cf 91       	pop	r28
 414:	1f 91       	pop	r17
 416:	0f 91       	pop	r16
 418:	ff 90       	pop	r15
 41a:	ef 90       	pop	r14
 41c:	df 90       	pop	r13
 41e:	cf 90       	pop	r12
 420:	bf 90       	pop	r11
 422:	af 90       	pop	r10
 424:	9f 90       	pop	r9
 426:	8f 90       	pop	r8
 428:	7f 90       	pop	r7
 42a:	6f 90       	pop	r6
 42c:	5f 90       	pop	r5
 42e:	4f 90       	pop	r4
 430:	3f 90       	pop	r3
 432:	2f 90       	pop	r2
 434:	08 95       	ret

00000436 <TCPClient_Clear>:

void TCPClient_Clear()
{
	memset(RESPONSE_BUFFER,0,DEFAULT_BUFFER_SIZE);
 436:	88 ec       	ldi	r24, 0xC8	; 200
 438:	e7 e3       	ldi	r30, 0x37	; 55
 43a:	f2 e0       	ldi	r31, 0x02	; 2
 43c:	df 01       	movw	r26, r30
 43e:	1d 92       	st	X+, r1
 440:	8a 95       	dec	r24
 442:	e9 f7       	brne	.-6      	; 0x43e <TCPClient_Clear+0x8>
	Counter = 0;	pointer = 0;
 444:	10 92 33 02 	sts	0x0233, r1
 448:	10 92 32 02 	sts	0x0232, r1
 44c:	10 92 31 02 	sts	0x0231, r1
 450:	10 92 30 02 	sts	0x0230, r1
 454:	08 95       	ret

00000456 <Start_Read_Response>:
}

void Start_Read_Response()
{
	Response_Status = SIM900_RESPONSE_STARTING;
 456:	85 e6       	ldi	r24, 0x65	; 101
 458:	80 93 13 03 	sts	0x0313, r24
	do {
		Read_Response();
 45c:	0e 94 27 01 	call	0x24e	; 0x24e <Read_Response>
	} while(Response_Status == SIM900_RESPONSE_WAITING);
 460:	80 91 13 03 	lds	r24, 0x0313
 464:	81 36       	cpi	r24, 0x61	; 97
 466:	d1 f3       	breq	.-12     	; 0x45c <Start_Read_Response+0x6>

}
 468:	08 95       	ret

0000046a <WaitForExpectedResponse>:
		return RESPONSE_BUFFER ;
	
}

bool WaitForExpectedResponse(char* ExpectedResponse)
{
 46a:	cf 93       	push	r28
 46c:	df 93       	push	r29
 46e:	ec 01       	movw	r28, r24
	TCPClient_Clear();
 470:	0e 94 1b 02 	call	0x436	; 0x436 <TCPClient_Clear>
 474:	2f ef       	ldi	r18, 0xFF	; 255
 476:	83 ed       	ldi	r24, 0xD3	; 211
 478:	90 e3       	ldi	r25, 0x30	; 48
 47a:	21 50       	subi	r18, 0x01	; 1
 47c:	80 40       	sbci	r24, 0x00	; 0
 47e:	90 40       	sbci	r25, 0x00	; 0
 480:	e1 f7       	brne	.-8      	; 0x47a <WaitForExpectedResponse+0x10>
 482:	00 c0       	rjmp	.+0      	; 0x484 <WaitForExpectedResponse+0x1a>
 484:	00 00       	nop
	_delay_ms(1000);
	Start_Read_Response();						/* First read response 
 486:	0e 94 2b 02 	call	0x456	; 0x456 <Start_Read_Response>
	char *strstr(const char *haystack, const char *needle)
	*/
	if((Response_Status != SIM900_RESPONSE_TIMEOUT) && (strstr(RESPONSE_BUFFER, ExpectedResponse) != NULL))
 48a:	80 91 13 03 	lds	r24, 0x0313
 48e:	83 36       	cpi	r24, 0x63	; 99
 490:	49 f0       	breq	.+18     	; 0x4a4 <WaitForExpectedResponse+0x3a>
 492:	be 01       	movw	r22, r28
 494:	87 e3       	ldi	r24, 0x37	; 55
 496:	92 e0       	ldi	r25, 0x02	; 2
 498:	0e 94 26 03 	call	0x64c	; 0x64c <strstr>
 49c:	89 2b       	or	r24, r25
 49e:	11 f0       	breq	.+4      	; 0x4a4 <WaitForExpectedResponse+0x3a>
	LCD_Clear();
 4a0:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCD_Clear>
	LCD_String(ExpectedResponse);
 4a4:	ce 01       	movw	r24, r28
 4a6:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCD_String>
 4aa:	2f ef       	ldi	r18, 0xFF	; 255
 4ac:	83 ed       	ldi	r24, 0xD3	; 211
 4ae:	90 e3       	ldi	r25, 0x30	; 48
 4b0:	21 50       	subi	r18, 0x01	; 1
 4b2:	80 40       	sbci	r24, 0x00	; 0
 4b4:	90 40       	sbci	r25, 0x00	; 0
 4b6:	e1 f7       	brne	.-8      	; 0x4b0 <WaitForExpectedResponse+0x46>
 4b8:	00 c0       	rjmp	.+0      	; 0x4ba <WaitForExpectedResponse+0x50>
 4ba:	00 00       	nop
	_delay_ms(1000);
	return "true";							/* Return true for success */
	return "false";								/* Else return false */
}
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	df 91       	pop	r29
 4c0:	cf 91       	pop	r28
 4c2:	08 95       	ret

000004c4 <SendATandExpectResponse>:

bool SendATandExpectResponse(char* ATCommand, char* ExpectedResponse)
{
 4c4:	cf 93       	push	r28
 4c6:	df 93       	push	r29
 4c8:	eb 01       	movw	r28, r22
	USART_SendString(ATCommand);				/* Send AT command to SIM900 */
 4ca:	0e 94 09 03 	call	0x612	; 0x612 <USART_SendString>
	USART_TxChar('\r');
 4ce:	8d e0       	ldi	r24, 0x0D	; 13
 4d0:	0e 94 05 03 	call	0x60a	; 0x60a <USART_TxChar>
	USART_TxChar('\n');
 4d4:	8a e0       	ldi	r24, 0x0A	; 10
 4d6:	0e 94 05 03 	call	0x60a	; 0x60a <USART_TxChar>
	return WaitForExpectedResponse(ExpectedResponse);
 4da:	ce 01       	movw	r24, r28
 4dc:	0e 94 35 02 	call	0x46a	; 0x46a <WaitForExpectedResponse>
}
 4e0:	df 91       	pop	r29
 4e2:	cf 91       	pop	r28
 4e4:	08 95       	ret

000004e6 <SIM900_Start>:
	USART_SendString("AT+CGATT=1\r");
	return WaitForExpectedResponse("OK");
}

bool SIM900_Start()
{
 4e6:	cf 93       	push	r28
 4e8:	ca e0       	ldi	r28, 0x0A	; 10
	for (uint8_t i=0;i<10;i++)
	{	
		if(SendATandExpectResponse("ATE0","OK")||SendATandExpectResponse("AT","OK"))
 4ea:	6c ee       	ldi	r22, 0xEC	; 236
 4ec:	71 e0       	ldi	r23, 0x01	; 1
 4ee:	8c ee       	ldi	r24, 0xEC	; 236
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	0e 94 62 02 	call	0x4c4	; 0x4c4 <SendATandExpectResponse>
 4f6:	81 11       	cpse	r24, r1
 4f8:	0a c0       	rjmp	.+20     	; 0x50e <SIM900_Start+0x28>
 4fa:	6c ee       	ldi	r22, 0xEC	; 236
 4fc:	71 e0       	ldi	r23, 0x01	; 1
 4fe:	81 ef       	ldi	r24, 0xF1	; 241
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	0e 94 62 02 	call	0x4c4	; 0x4c4 <SendATandExpectResponse>
 506:	81 11       	cpse	r24, r1
 508:	02 c0       	rjmp	.+4      	; 0x50e <SIM900_Start+0x28>
 50a:	c1 50       	subi	r28, 0x01	; 1
	return WaitForExpectedResponse("OK");
}

bool SIM900_Start()
{
	for (uint8_t i=0;i<10;i++)
 50c:	71 f7       	brne	.-36     	; 0x4ea <SIM900_Start+0x4>
	{	
		if(SendATandExpectResponse("ATE0","OK")||SendATandExpectResponse("AT","OK"))
		return true;
	}
	return false;
}
 50e:	cf 91       	pop	r28
 510:	08 95       	ret

00000512 <SMS_Test>:
		return 0;
	}
}

void SMS_Test(){
	SendATandExpectResponse("AT", "OK");
 512:	6c ee       	ldi	r22, 0xEC	; 236
 514:	71 e0       	ldi	r23, 0x01	; 1
 516:	81 ef       	ldi	r24, 0xF1	; 241
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	0e 94 62 02 	call	0x4c4	; 0x4c4 <SendATandExpectResponse>
	
	LCD_Clear();
 51e:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCD_Clear>
	SendATandExpectResponse("AT+CMGF=1", "OK");
 522:	6c ee       	ldi	r22, 0xEC	; 236
 524:	71 e0       	ldi	r23, 0x01	; 1
 526:	8f ee       	ldi	r24, 0xEF	; 239
 528:	91 e0       	ldi	r25, 0x01	; 1
 52a:	0e 94 62 02 	call	0x4c4	; 0x4c4 <SendATandExpectResponse>
	LCD_Clear();
 52e:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCD_Clear>
	SendATandExpectResponse("AT+CMGS=\"+9779860086391\"","OK");
 532:	6c ee       	ldi	r22, 0xEC	; 236
 534:	71 e0       	ldi	r23, 0x01	; 1
 536:	89 ef       	ldi	r24, 0xF9	; 249
 538:	91 e0       	ldi	r25, 0x01	; 1
 53a:	0e 94 62 02 	call	0x4c4	; 0x4c4 <SendATandExpectResponse>
 53e:	2f ef       	ldi	r18, 0xFF	; 255
 540:	8b e7       	ldi	r24, 0x7B	; 123
 542:	92 e9       	ldi	r25, 0x92	; 146
 544:	21 50       	subi	r18, 0x01	; 1
 546:	80 40       	sbci	r24, 0x00	; 0
 548:	90 40       	sbci	r25, 0x00	; 0
 54a:	e1 f7       	brne	.-8      	; 0x544 <SMS_Test+0x32>
 54c:	00 c0       	rjmp	.+0      	; 0x54e <SMS_Test+0x3c>
 54e:	00 00       	nop
	_delay_ms(3000);
	SendATandExpectResponse("Test From Nischal","OK");
 550:	6c ee       	ldi	r22, 0xEC	; 236
 552:	71 e0       	ldi	r23, 0x01	; 1
 554:	82 e1       	ldi	r24, 0x12	; 18
 556:	92 e0       	ldi	r25, 0x02	; 2
 558:	0e 94 62 02 	call	0x4c4	; 0x4c4 <SendATandExpectResponse>
 55c:	2f ef       	ldi	r18, 0xFF	; 255
 55e:	8f e4       	ldi	r24, 0x4F	; 79
 560:	93 ec       	ldi	r25, 0xC3	; 195
 562:	21 50       	subi	r18, 0x01	; 1
 564:	80 40       	sbci	r24, 0x00	; 0
 566:	90 40       	sbci	r25, 0x00	; 0
 568:	e1 f7       	brne	.-8      	; 0x562 <SMS_Test+0x50>
 56a:	00 c0       	rjmp	.+0      	; 0x56c <SMS_Test+0x5a>
 56c:	00 00       	nop
	_delay_ms(4000);
	USART_TxChar(26);
 56e:	8a e1       	ldi	r24, 0x1A	; 26
 570:	0e 94 05 03 	call	0x60a	; 0x60a <USART_TxChar>
	LCD_String("sent");
 574:	84 e2       	ldi	r24, 0x24	; 36
 576:	92 e0       	ldi	r25, 0x02	; 2
 578:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCD_String>
 57c:	08 95       	ret

0000057e <__vector_13>:
	
}


ISR (USART_RXC_vect)
{
 57e:	1f 92       	push	r1
 580:	0f 92       	push	r0
 582:	0f b6       	in	r0, 0x3f	; 63
 584:	0f 92       	push	r0
 586:	11 24       	eor	r1, r1
 588:	2f 93       	push	r18
 58a:	8f 93       	push	r24
 58c:	9f 93       	push	r25
 58e:	ef 93       	push	r30
 590:	ff 93       	push	r31
	
	uint8_t oldsrg = SREG;
 592:	2f b7       	in	r18, 0x3f	; 63
	Flag = 1;
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	90 93 36 02 	sts	0x0236, r25
 59c:	80 93 35 02 	sts	0x0235, r24
	RESPONSE_BUFFER[Counter] = UDR;
 5a0:	e0 91 32 02 	lds	r30, 0x0232
 5a4:	f0 91 33 02 	lds	r31, 0x0233
 5a8:	8c b1       	in	r24, 0x0c	; 12
 5aa:	e9 5c       	subi	r30, 0xC9	; 201
 5ac:	fd 4f       	sbci	r31, 0xFD	; 253
 5ae:	80 83       	st	Z, r24
	Counter++;
 5b0:	80 91 32 02 	lds	r24, 0x0232
 5b4:	90 91 33 02 	lds	r25, 0x0233
 5b8:	01 96       	adiw	r24, 0x01	; 1
 5ba:	90 93 33 02 	sts	0x0233, r25
 5be:	80 93 32 02 	sts	0x0232, r24
	if(Counter == DEFAULT_BUFFER_SIZE){
 5c2:	80 91 32 02 	lds	r24, 0x0232
 5c6:	90 91 33 02 	lds	r25, 0x0233
 5ca:	88 3c       	cpi	r24, 0xC8	; 200
 5cc:	91 05       	cpc	r25, r1
 5ce:	41 f4       	brne	.+16     	; 0x5e0 <__vector_13+0x62>
		Counter = 0; pointer = 0;
 5d0:	10 92 33 02 	sts	0x0233, r1
 5d4:	10 92 32 02 	sts	0x0232, r1
 5d8:	10 92 31 02 	sts	0x0231, r1
 5dc:	10 92 30 02 	sts	0x0230, r1
	}
	SREG = oldsrg;
 5e0:	2f bf       	out	0x3f, r18	; 63
}
 5e2:	ff 91       	pop	r31
 5e4:	ef 91       	pop	r30
 5e6:	9f 91       	pop	r25
 5e8:	8f 91       	pop	r24
 5ea:	2f 91       	pop	r18
 5ec:	0f 90       	pop	r0
 5ee:	0f be       	out	0x3f, r0	; 63
 5f0:	0f 90       	pop	r0
 5f2:	1f 90       	pop	r1
 5f4:	18 95       	reti

000005f6 <USART_Init>:
#include "USART_RS232_H_file.h"						/* Include USART header file */

void USART_Init(unsigned long BAUDRATE)				/* USART initialize function */
{ 
	//unsigned BAUD  =  (((F_CPU / (BAUDRATE * 16))) - 1);
	UCSRB |= (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);	/* Enable USART transmitter and receiver */
 5f6:	8a b1       	in	r24, 0x0a	; 10
 5f8:	88 69       	ori	r24, 0x98	; 152
 5fa:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << URSEL)| (1 << UCSZ1) | (1 << UCSZ0);	/* Write USCRC for 8 bit data and 1 stop bit */ 
 5fc:	80 b5       	in	r24, 0x20	; 32
 5fe:	86 68       	ori	r24, 0x86	; 134
 600:	80 bd       	out	0x20, r24	; 32
	UBRRL = 8;							/* Load UBRRL with lower 8 bit of prescale value */
 602:	88 e0       	ldi	r24, 0x08	; 8
 604:	89 b9       	out	0x09, r24	; 9
	UBRRH = (8 >> 8);					/* Load UBRRH with upper 8 bit of prescale value */
 606:	10 bc       	out	0x20, r1	; 32
 608:	08 95       	ret

0000060a <USART_TxChar>:
	return(UDR);									/* Get and return received data */ 
}

void USART_TxChar(char data)						/* Data transmitting function */
{
	UDR = data;										/* Write data to be transmitting in UDR */
 60a:	8c b9       	out	0x0c, r24	; 12
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
 60c:	5d 9b       	sbis	0x0b, 5	; 11
 60e:	fe cf       	rjmp	.-4      	; 0x60c <USART_TxChar+0x2>
}
 610:	08 95       	ret

00000612 <USART_SendString>:

void USART_SendString(char *str)					/* Send string of USART data function */ 
{
 612:	cf 93       	push	r28
 614:	df 93       	push	r29
 616:	ec 01       	movw	r28, r24
	int i=0;																	
	while (str[i]!=0)
 618:	88 81       	ld	r24, Y
 61a:	88 23       	and	r24, r24
 61c:	31 f0       	breq	.+12     	; 0x62a <USART_SendString+0x18>
 61e:	21 96       	adiw	r28, 0x01	; 1
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
 620:	0e 94 05 03 	call	0x60a	; 0x60a <USART_TxChar>
}

void USART_SendString(char *str)					/* Send string of USART data function */ 
{
	int i=0;																	
	while (str[i]!=0)
 624:	89 91       	ld	r24, Y+
 626:	81 11       	cpse	r24, r1
 628:	fb cf       	rjmp	.-10     	; 0x620 <USART_SendString+0xe>
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
		i++;
	}
 62a:	df 91       	pop	r29
 62c:	cf 91       	pop	r28
 62e:	08 95       	ret

00000630 <strncmp>:
 630:	fb 01       	movw	r30, r22
 632:	dc 01       	movw	r26, r24
 634:	41 50       	subi	r20, 0x01	; 1
 636:	50 40       	sbci	r21, 0x00	; 0
 638:	30 f0       	brcs	.+12     	; 0x646 <strncmp+0x16>
 63a:	8d 91       	ld	r24, X+
 63c:	01 90       	ld	r0, Z+
 63e:	80 19       	sub	r24, r0
 640:	19 f4       	brne	.+6      	; 0x648 <strncmp+0x18>
 642:	00 20       	and	r0, r0
 644:	b9 f7       	brne	.-18     	; 0x634 <strncmp+0x4>
 646:	88 1b       	sub	r24, r24
 648:	99 0b       	sbc	r25, r25
 64a:	08 95       	ret

0000064c <strstr>:
 64c:	fb 01       	movw	r30, r22
 64e:	51 91       	ld	r21, Z+
 650:	55 23       	and	r21, r21
 652:	a9 f0       	breq	.+42     	; 0x67e <strstr+0x32>
 654:	bf 01       	movw	r22, r30
 656:	dc 01       	movw	r26, r24
 658:	4d 91       	ld	r20, X+
 65a:	45 17       	cp	r20, r21
 65c:	41 11       	cpse	r20, r1
 65e:	e1 f7       	brne	.-8      	; 0x658 <strstr+0xc>
 660:	59 f4       	brne	.+22     	; 0x678 <strstr+0x2c>
 662:	cd 01       	movw	r24, r26
 664:	01 90       	ld	r0, Z+
 666:	00 20       	and	r0, r0
 668:	49 f0       	breq	.+18     	; 0x67c <strstr+0x30>
 66a:	4d 91       	ld	r20, X+
 66c:	40 15       	cp	r20, r0
 66e:	41 11       	cpse	r20, r1
 670:	c9 f3       	breq	.-14     	; 0x664 <strstr+0x18>
 672:	fb 01       	movw	r30, r22
 674:	41 11       	cpse	r20, r1
 676:	ef cf       	rjmp	.-34     	; 0x656 <strstr+0xa>
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	01 97       	sbiw	r24, 0x01	; 1
 67e:	08 95       	ret

00000680 <_exit>:
 680:	f8 94       	cli

00000682 <__stop_program>:
 682:	ff cf       	rjmp	.-2      	; 0x682 <__stop_program>
